                            
    MODEL:
                              
    The brainfuck language uses a simple machine model consisting of the program and
    instruction pointer, as well as an array of at least 30,000 byte cells initialized
    to zero; a movable data pointer (initialized to point to the leftmost byte of the array);
    and two streams of bytes for input and output (most often connected to a keyboard and
    a monitor respectively, and using the ASCII character encoding).    


    DESIGN

    The language consists of eight commands, listed below. A brainfuck program is
    a sequence of these commands, possibly interspersed with other characters
    (which are ignored). The commands are executed sequentially, with some exceptions:
    an instruction pointer begins at the first command, and each command it points to is
    executed, after which it normally moves forward to the next command. The program
    terminates when the instruction pointer moves past the last command.
    

    COMMANDS

    >	increment the data pointer (to point to the next cell to the right).
    <	decrement the data pointer (to point to the next cell to the left).
    +	increment (increase by one) the byte at the data pointer.
    -	decrement (decrease by one) the byte at the data pointer.
    .	output the byte at the data pointer.
    ,	accept one byte of input, storing its value in the byte at the data pointer.
    [	if the byte at the data pointer is zero, then instead of moving the
        instruction pointer forward to the next command, jump it forward to the
        command after the matching ] command.
    ]	if the byte at the data pointer is nonzero, then instead of moving the
        instruction pointer forward to the next command, jump it back to the
        command after the matching [ command.
        

    VISUAL MEMORY REPRESENTATION:


    Initial environment:
    
    cell#       0   1   2   3   4   5   6   7   8   9                            30000
    
              |_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|..........|_0_|
     data       ^                                                                       
    pointer


    After code execution:

    >>>

    cell#:        0   1   2   3   4   5   6   7   8   9                            30000

                |_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|..........|_0_|
    data                      ^                                                          
    pointer


    +++++>++++

    cell#:        0   1   2   3   4   5   6   7   8   9                            30000

                |_0_|_0_|_0_|_5_|_2_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|..........|_0_|
    data                          ^                                                      
    pointer


    [>+>+<<-]

    cell#:        0   1   2   3   4   5   6   7   8   9                            30000

                |_0_|_0_|_0_|_5_|_0_|_4_|_4_|_0_|_0_|_0_|_0_|_0_|_0_|_0_|..........|_0_|
    data                          ^                                                      
    pointer

